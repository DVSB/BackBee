<?php

namespace BackBuilder\Renderer;

use BackBuilder\Site\Layout;

/**
 * Interface for a renderer adapter
 *
 * @category    BackBuilder
 * @package     BackBuilder\Renderer
 * @copyright   Lp digital system
 * @author      e.chau <eric.chau@lp-digital.fr>
 */
interface IRendererAdapter
{
    /**
     * Constructor; every RendererAdapter need to be construct with a ARenderer
     *
     * @param ARenderer $renderer
     */
    public function __construct(ARenderer $renderer);

    /**
     * Returns array that contains every single file's extension managed by this adapter
     *
     * @return array
     */
    public function getManagedFileExtensions();

    /**
     * Check if $filename exist in $templateDir; it also checks if the file is readable
     *
     * @param  string  $filename
     * @param  array   $templateDir array that contains every directories where it has to looking
     *                              for $filename
     * @return boolean true if the filename was found into $templateDir and it's readable,
     *                             else it returns false
     */
    public function isValidTemplateFile($filename, array $templateDir);

    /**
     * Returns render of $filename template which is compute with $params and $vars
     *
     * @param  string $filename
     * @param  array  $templateDir
     * @param  array  $params
     * @return string
     */
    public function renderTemplate($filename, array $templateDir, array $params = array(), array $vars = array());

    /**
     * Updates a file script of a layout
     * @param  Layout $layout     The layout to update
     * @param  string $layoutFile the layout with absolute path generated by ARendrer::updateLayout()
     * @return string The filename of the updated script
     */
    public function updateLayout(Layout $layout, $layoutFile);

    /**
     * This is called everytime we clone a renderer
     * @param Renderer $renderer the new renderer
     */
    public function onNewRenderer(ARenderer $renderer);

    /**
     * This is called everytime we restore previous renderer
     * @param Renderer $renderer the previous renderer
     */
    public function onRestorePreviousRenderer(ARenderer $renderer);
}
